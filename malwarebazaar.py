#!/usr/bin/env python3
##
# project: MalwareBazaar API wrapper
# info: https://bazaar.abuse.ch/api/
# --
# author: adam m. swanda (2020)
# website: https://www.deadbits.org
##

import sys
import json
import argparse

import requests

from pygments import lexers
from pygments import highlight
from pygments import formatters

API_KEY = None
API_URL = 'https://mb-api.abuse.ch/api/v1'
HEADERS = {'API-KEY': ''}


def api_post(data):
    resp = None

    try:
        req = requests.post(API_URL, data=data, headers=HEADERS, timeout=15)
        if req.status_code == 200:
            resp = req.json()
    except Exception as err:
        print(f'[error] exception in query_tag: {err}')
        pass

    return resp


def query_tag(tag):
    data = {'query': 'get_taginfo', 'tag': tag}
    results = api_post(data)
    return results


def query_recent():
    data = {'query': 'get_recent', 'selector': '100'}
    results = api_post(data)
    return results


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='MalwareBazaar API wrapper')

    parser.add_argument('-a', '--apikey',
        help='API key',
        type=str,
        required=False)

    parser.add_argument('-t', '--tag',
        help='Query records by tag',
        action='store',
        required=False)

    parser.add_argument('-r', '--recent',
        help='Get recent records',
        action='store_true',
        default=False,
        required=False)

    parser.add_argument('-p', '--pretty',
        help='Pretty-print JSON output (do not use if piping results to file)',
        action='store_true',
        default=False,
        required=False)

    args = parser.parse_args()

    if not args.apikey:
        print('[error] must specify --apikey argument')
        sys.exit(1)

    if args.tag and args.recent:
        print('[error] cannot use --tag and --recent arguments together')
        sys.exit(1)

    results = None

    if args.tag:

        results = query_tag(args.tag)

    elif args.recent:
        results = query_recent()

    if args.pretty:
        print(highlight(json.dumps(results, indent=2), lexers.JsonLexer(), formatters.TerminalFormatter()))
    else:
        print(json.dumps(results, indent=2))
